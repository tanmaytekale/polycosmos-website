"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cursor = Cursor;

var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _Curve = require("../shape/Curve");
var _Cross = require("../shape/Cross");
var _getCursorRectangle = require("../util/cursor/getCursorRectangle");
var _Rectangle = require("../shape/Rectangle");
var _getRadialCursorPoints = require("../util/cursor/getRadialCursorPoints");
var _Sector = require("../shape/Sector");
var _getCursorPoints = require("../util/cursor/getCursorPoints");
var _ReactUtils = require("../util/ReactUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
 * Optimized Cursor component with performance improvements
 */
function Cursor(props) {
  const {
    element,
    tooltipEventType,
    isActive,
    activeCoordinate,
    activePayload,
    offset,
    activeTooltipIndex,
    tooltipAxisBandSize,
    layout,
    chartName
  } = props;

  // Early return if cursor shouldn't be shown
  if (!element || !isActive || !activeCoordinate || 
      (chartName !== 'ScatterChart' && tooltipEventType !== 'axis')) {
    return null;
  }

  // Memoize cursor props to prevent unnecessary recalculations
  const elementPropsCursor = React.useMemo(() => {
    return element.props.cursor ?? element.type?.defaultProps?.cursor;
  }, [element]);

  if (!elementPropsCursor) return null;

  // Memoize the rest props based on chart type
  const [restProps, cursorComp] = React.useMemo(() => {
    let restProps, cursorComp = _Curve.Curve;

    switch(chartName) {
      case 'ScatterChart':
        restProps = activeCoordinate;
        cursorComp = _Cross.Cross;
        break;
        
      case 'BarChart':
        restProps = (0, _getCursorRectangle.getCursorRectangle)(
          layout, 
          activeCoordinate, 
          offset, 
          tooltipAxisBandSize
        );
        cursorComp = _Rectangle.Rectangle;
        break;
        
      case 'RadialChart':
        const { cx, cy, radius, startAngle, endAngle } = 
          (0, _getRadialCursorPoints.getRadialCursorPoints)(activeCoordinate);
        restProps = {
          cx, cy, startAngle, endAngle,
          innerRadius: radius,
          outerRadius: radius
        };
        cursorComp = _Sector.Sector;
        break;
        
      default:
        restProps = {
          points: (0, _getCursorPoints.getCursorPoints)(layout, activeCoordinate, offset)
        };
    }

    return [restProps, cursorComp];
  }, [chartName, layout, activeCoordinate, offset, tooltipAxisBandSize]);

  // Combine all cursor props
  const cursorProps = React.useMemo(() => ({
    stroke: '#ccc',
    pointerEvents: 'none',
    ...offset,
    ...restProps,
    ...(0, _ReactUtils.filterProps)(elementPropsCursor, false),
    payload: activePayload,
    payloadIndex: activeTooltipIndex,
    className: (0, _clsx.default)('recharts-tooltip-cursor', elementPropsCursor.className)
  }), [offset, restProps, elementPropsCursor, activePayload, activeTooltipIndex]);

  return /*#__PURE__*/React.isValidElement(elementPropsCursor) 
    ? /*#__PURE__*/React.cloneElement(elementPropsCursor, cursorProps) 
    : /*#__PURE__*/React.createElement(cursorComp, cursorProps);
}